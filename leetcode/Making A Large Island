Approach 1

The provided Java solution aims to determine the size of the largest island in an \( n \times n \) binary grid after changing at most one `0` to `1`.
The algorithm iterates through each cell in the grid, and upon encountering a `0`, temporarily converts it to `1`, then calls the `check` method to calculate the size of the resulting 
island using a depth-first search (DFS) implemented with a stack. This search explores all connected `1`s, keeping track of visited cells in a set to avoid duplicates. The maximum island size is 
updated whenever a larger size is found during these iterations. The time complexity of the approach is \( O(N^4) \), where \( N \) is the dimension of the grid, due to the nested loops iterating
through all cells combined with the DFS potentially exploring every cell in the worst-case scenario. The space complexity is \( O(N^2) \) in the worst case, which arises from the space required
to maintain the `seen` set and the stack used for the DFS traversal.

class Solution {
    int[] dr = new int[]{-1, 0, 1, 0};
    int[] dc = new int[]{0, -1, 0, 1};

    public int largestIsland(int[][] grid) {
        int N = grid.length;

        int ans = 0;
        boolean hasZero = false;
        for (int r = 0; r < N; ++r)
            for (int c = 0; c < N; ++c)
                if (grid[r][c] == 0) {
                    hasZero = true;
                    grid[r][c] = 1;
                    ans = Math.max(ans, check(grid, r, c));
                    grid[r][c] = 0;
                }

        return hasZero ? ans : N*N;
    }

    public int check(int[][] grid, int r0, int c0) {
        int N = grid.length;
        Stack<Integer> stack = new Stack();
        Set<Integer> seen = new HashSet();
        stack.push(r0 * N + c0);
        seen.add(r0 * N + c0);

        while (!stack.isEmpty()) {
            int code = stack.pop();
            int r = code / N, c = code % N;
            for (int k = 0; k < 4; ++k) {
                int nr = r + dr[k], nc = c + dc[k];
                if (!seen.contains(nr * N + nc) && 0 <= nr && nr < N &&
                        0 <= nc && nc < N && grid[nr][nc] == 1) {
                    stack.push(nr * N + nc);
                    seen.add(nr * N + nc);
                }
            }
        }

        return seen.size();
    }
}

Approach 2 
The given solution efficiently finds the size of the largest island in an \( n \times n \) binary grid after changing at most one `0` to `1`.
The approach starts by labeling each island with a unique index using Depth-First Search (DFS), which calculates the area of each island and stores
it in an `area` array. For each cell that is `0`, the algorithm checks its neighboring cells to identify distinct islands it could connect to if changed to `1`,
storing their indices in a `seen` set. It then calculates the potential size of the new island formed by changing that `0` and updates the maximum size found. 
The time complexity is \( O(N^2) \) due to the two passes over the grid: one for DFS labeling and another for checking `0`s, while the space complexity is also
\( O(N^2) \) for storing the grid, the area array, and the `seen` set. This efficient labeling and area calculation ensures that the solution operates within
acceptable limits for the input constraints.



class Solution {
    int[] dr = new int[]{-1, 0, 1, 0};
    int[] dc = new int[]{0, -1, 0, 1};
    int[][] grid;
    int N;

    public int largestIsland(int[][] grid) {
        this.grid = grid;
        N = grid.length;

        int index = 2;
        int[] area = new int[N*N + 2];
        for (int r = 0; r < N; ++r)
            for (int c = 0; c < N; ++c)
                if (grid[r][c] == 1)
                    area[index] = dfs(r, c, index++);

        int ans = 0;
        for (int x: area) 
            ans = Math.max(ans, x);
    
        for (int r = 0; r < N; ++r)
            for (int c = 0; c < N; ++c)
                if (grid[r][c] == 0) {
                    Set<Integer> seen = new HashSet();
                    for (Integer move: neighbors(r, c))
                        if (grid[move / N][move % N] > 1)
                            seen.add(grid[move / N][move % N]);

                    int bns = 1;
                    for (int i: seen) 
                        bns += area[i];
                    ans = Math.max(ans, bns);
                }

        return ans;
    }

    public int dfs(int r, int c, int index) {
        int ans = 1;
        grid[r][c] = index;
        for (Integer move: neighbors(r, c)) {
            if (grid[move / N][move % N] == 1) {
                grid[move / N][move % N] = index;
                ans += dfs(move / N, move % N, index);
            }
        }

        return ans;
    }

    public List<Integer> neighbors(int r, int c) {
        List<Integer> ans = new ArrayList();
        for (int k = 0; k < 4; ++k) {
            int nr = r + dr[k];
            int nc = c + dc[k];
            if (0 <= nr && nr < N && 0 <= nc && nc < N)
                ans.add(nr * N + nc);
        }

        return ans;
    }
}

