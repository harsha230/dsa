
class Solution {
     public int[] exclusiveTime(int n, List<String> logs) {
        int[] res = new int[n];
        Stack<Integer> stack = new Stack<>();
        int prevTime = 0;
        
        for (String log : logs) {
            String[] parts = log.split(":");
            int id = Integer.parseInt(parts[0]);
            String type = parts[1];
            int time = Integer.parseInt(parts[2]);
            
            if (type.equals("start")) {
                // If there's a function currently running, update its time
                if (!stack.isEmpty()) {
                    res[stack.peek()] += time - prevTime;
                }
                // Push the new function onto the stack
                stack.push(id);
                prevTime = time;  // Update previous time to current start time
            } else {
                // The function on top of the stack ends
                res[stack.pop()] += time - prevTime + 1;
                prevTime = time + 1;  // Move to the next timestamp
            }
        }
        return res;
    }
}
Time Complexity: O(m), where m is the number of logs.
Space Complexity: O(n), where n is the number of functions.
