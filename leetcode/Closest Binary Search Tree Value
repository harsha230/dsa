
Appproach 1
class Solution {
  public void inorder(TreeNode root, List<Integer> nums) {
    if (root == null) return;
    inorder(root.left, nums);
    nums.add(root.val);
    inorder(root.right, nums);
  }

  public int closestValue(TreeNode root, double target) {
    List<Integer> nums = new ArrayList();
    inorder(root, nums);
    return Collections.min(nums, new Comparator<Integer>() {
      @Override
      public int compare(Integer o1, Integer o2) {
        return Math.abs(o1 - target) < Math.abs(o2 - target) ? -1 : 1;
      }
    });
  }
}


Approach 2
The provided code implements an iterative approach to find the closest value to a given target in a Binary Search Tree (BST) using a stack for in-order traversal. 
As it traverses the tree, it keeps track of the previously visited node's value (`pred`). The algorithm pushes nodes onto the stack until it reaches the leftmost node and 
then pops nodes to check if the target value lies between `pred` and the current node's value. If it does, the algorithm determines which of these two values is closer to the
target and returns it. If the traversal completes without finding a closer value, it returns `pred`. This approach has a time complexity of **O(h)**, where h is the height of the tree,
making it O(log n) for balanced trees and O(n) for unbalanced trees. The space complexity is also **O(h)** due to the stack used for traversal, which can be O(log n) for balanced trees
and O(n) for unbalanced trees.

class Solution {
  public int closestValue(TreeNode root, double target) {
    LinkedList<TreeNode> stack = new LinkedList();
    long pred = Long.MIN_VALUE;

    while (!stack.isEmpty() || root != null) {
      while (root != null) {
        stack.add(root);
        root = root.left;
      }
      root = stack.removeLast();

      if (pred <= target && target < root.val)
        return Math.abs(pred - target) <= Math.abs(root.val - target) ? (int)pred : root.val;

      pred = root.val;
      root = root.right;
    }
    return (int)pred;
  }
}



Approach 3

The provided code defines an iterative approach to find the closest value to a specified target in a Binary Search Tree (BST) without using additional data structures. 
It initializes `closest` to the root's value and iteratively traverses the tree by comparing the current node's value with the target. For each node, it updates `closest` 
if the absolute difference between the current node's value and the target is smaller than the difference between `closest` and the target. Additionally, if the differences are equal,
it chooses the smaller value. The traversal direction is determined by comparing the target to the current node's value, moving left if the target is smaller and right otherwise. 
This method has a time complexity of **O(h)**, where h is the height of the tree, which is **O(log n)** for balanced trees and **O(n)** for unbalanced trees. 
The space complexity is **O(1)** since it uses a constant amount of extra space regardless of the input size.

class Solution {
  public int closestValue(TreeNode root, double target) {
    int val, closest = root.val;
    while (root != null) {
      val = root.val;
      closest = Math.abs(val - target) < Math.abs(closest - target) 
          || (Math.abs(val - target) == Math.abs(closest - target) && val < closest) ? val : closest;
      root =  target < root.val ? root.left : root.right;
    }
    return closest;
  }
}

