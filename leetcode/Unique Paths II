

Approach 1
Time Complexity:
The time complexity is approximately 
O(2(m+n))
O(2 (m+n) ) in the worst case, where mm and nn are the dimensions of the grid. This exponential complexity occurs because each cell 
may branch into two recursive calls (right and down) without any memoization, leading to a large number of repeated calculations as the recursion tree grows.

Space Complexity:

O(m+n), which represents the depth of the recursion stack in the worst case, as the maximum depth corresponds to the longest possible path (from the top-left to the bottom-right corner).

O(mÃ—n) and make it more efficient for large grids.
public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        return countPaths(obstacleGrid, 0, 0, m, n);
    }
    
    private int countPaths(int[][] grid, int x, int y, int m, int n) {
        // If the robot is out of bounds or hits an obstacle, return 0 paths
        if (x >= m || y >= n || grid[x][y] == 1) {
            return 0;
        }
        // If the robot reaches the bottom-right corner, return 1 path
        if (x == m - 1 && y == n - 1) {
            return 1;
        }
        // Recursively count the number of paths from the right and down cells
        return countPaths(grid, x + 1, y, m, n) + countPaths(grid, x, y + 1, m, n);
    }
}

Approach 2

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int R = obstacleGrid.length;
        int C = obstacleGrid[0].length;

        // If the starting cell has an obstacle, then simply return as there would be
        // no paths to the destination.
        if (obstacleGrid[0][0] == 1) {
            return 0;
        }

        // Number of ways of reaching the starting cell = 1.
        obstacleGrid[0][0] = 1;

        // Filling the values for the first column
        for (int i = 1; i < R; i++) {
            obstacleGrid[i][0] = (obstacleGrid[i][0] == 0 &&
                    obstacleGrid[i - 1][0] == 1)
                ? 1
                : 0;
        }

        // Filling the values for the first row
        for (int i = 1; i < C; i++) {
            obstacleGrid[0][i] = (obstacleGrid[0][i] == 0 &&
                    obstacleGrid[0][i - 1] == 1)
                ? 1
                : 0;
        }

        // Starting from cell(1,1) fill up the values
        // No. of ways of reaching cell[i][j] = cell[i - 1][j] + cell[i][j - 1]
        // i.e. From above and left.
        for (int i = 1; i < R; i++) {
            for (int j = 1; j < C; j++) {
                if (obstacleGrid[i][j] == 0) {
                    obstacleGrid[i][j] = obstacleGrid[i - 1][j] +
                    obstacleGrid[i][j - 1];
                } else {
                    obstacleGrid[i][j] = 0;
                }
            }
        }

        // Return value stored in rightmost bottommost cell. That is the destination.
        return obstacleGrid[R - 1][C - 1];
    }
}
