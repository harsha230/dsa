import java.util.*;

class Solution {
    
    private static final int[][] directions = 
        new int[][]{{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
    
    public List<int[]> shortestPathBinaryMatrix(int[][] grid) {
        
        // Firstly, we need to check that the start and target cells are open.
        if (grid[0][0] != 0 || grid[grid.length - 1][grid[0].length - 1] != 0) {
            return Collections.emptyList(); // Return an empty list if the path is blocked.
        }
        
        // Set up the BFS.
        Queue<Node> queue = new ArrayDeque<>();
        queue.add(new Node(0, 0, new ArrayList<>(List.of(new int[]{0, 0})))); // Initialize the queue with the starting cell.
        boolean[][] visited = new boolean[grid.length][grid[0].length]; // Used as visited set.
        visited[0][0] = true;
        
        // Carry out the BFS
        while (!queue.isEmpty()) {
            Node node = queue.remove();
            int row = node.row;
            int col = node.col;
            List<int[]> path = node.path;

            // Check if this is the target cell.
            if (row == grid.length - 1 && col == grid[0].length - 1) {
                return path; // Return the path when the target is reached.
            }
            for (int[] neighbour : getNeighbours(row, col, grid)) {
                int neighbourRow = neighbour[0];
                int neighbourCol = neighbour[1];
                if (visited[neighbourRow][neighbourCol]) {
                    continue;
                }
                visited[neighbourRow][neighbourCol] = true;
                
                // Create a new path that includes the neighbour
                List<int[]> newPath = new ArrayList<>(path);
                newPath.add(new int[]{neighbourRow, neighbourCol});
                
                queue.add(new Node(neighbourRow, neighbourCol, newPath));
            }
        }
        
        // The target was unreachable.
        return Collections.emptyList();  
    }
    
    private List<int[]> getNeighbours(int row, int col, int[][] grid) {
        List<int[]> neighbours = new ArrayList<>();
        for (int[] direction : directions) {
            int newRow = row + direction[0];
            int newCol = col + direction[1];
            if (newRow < 0 || newCol < 0 || newRow >= grid.length 
                    || newCol >= grid[0].length
                    || grid[newRow][newCol] != 0) {
                continue;    
            }
            neighbours.add(new int[]{newRow, newCol});
        }
        return neighbours; 
    }

    // Helper class to store the current position and path
    private static class Node {
        int row;
        int col;
        List<int[]> path;

        Node(int row, int col, List<int[]> path) {
            this.row = row;
            this.col = col;
            this.path = path;
        }
    }
}
