import java.util.Stack;

public class BasicCalculator {
    public int calculate(String s) {
        Stack<Integer> stack = new Stack<>();
        int currentNumber = 0;
        int result = 0;
        int currentSign = 1;  // 1 represents '+', -1 represents '-'
        
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            
            // If the character is a digit, build the current number
            if (Character.isDigit(ch)) {
                currentNumber = currentNumber * 10 + (ch - '0');
            }
            // If the character is '+' or '-', complete the previous number
            // and reset currentNumber, then update currentSign
            else if (ch == '+') {
                result += currentSign * currentNumber;
                currentNumber = 0;
                currentSign = 1;
            } else if (ch == '-') {
                result += currentSign * currentNumber;
                currentNumber = 0;
                currentSign = -1;
            }
            // If the character is '(', push the result and currentSign onto the stack
            // Reset result and sign for the new expression within the parentheses
            else if (ch == '(') {
                stack.push(result);
                stack.push(currentSign);
                result = 0;
                currentSign = 1;
            }
            // If the character is ')', compute the result within the parentheses
            // Pop and apply the previous result and sign from the stack
            else if (ch == ')') {
                result += currentSign * currentNumber;
                currentNumber = 0;
                result *= stack.pop();  // Multiply with the sign before the parenthesis
                result += stack.pop();   // Add the result before the parenthesis
            }
        }
        
        // Add the last accumulated number to the result
        result += currentSign * currentNumber;
        
        return result;
    }
}
