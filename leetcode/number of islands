
BFS
public class Solution {
    
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) {
            return 0;
        }

        int rows = grid.length, cols = grid[0].length;
        int islandCount = 0;

        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                if (grid[row][col] == '1') {
                    islandCount++;
                    bfs(grid, row, col);
                }
            }
        }

        return islandCount;
    }

    private void bfs(char[][] grid, int row, int col) {
        int[] rowDirections = {1, -1, 0, 0};
        int[] colDirections = {0, 0, 1, -1};

        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[] {row, col});
        grid[row][col] = '0'; // Mark the land as visited

        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int currRow = current[0], currCol = current[1];

            for (int i = 0; i < 4; i++) {
                int newRow = currRow + rowDirections[i];
                int newCol = currCol + colDirections[i];

                if (isInBounds(grid, newRow, newCol) && grid[newRow][newCol] == '1') {
                    queue.offer(new int[] {newRow, newCol});
                    grid[newRow][newCol] = '0'; // Mark as visited
                }
            }
        }
    }

    private boolean isInBounds(char[][] grid, int row, int col) {
        return row >= 0 && row < grid.length && col >= 0 && col < grid[0].length;
    }}



DFS STACK BASED

import java.util.Stack;

public class NumberOfIslandsDFS {
    
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) {
            return 0;
        }

        int rows = grid.length, cols = grid[0].length;
        int islandCount = 0;

        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                if (grid[row][col] == '1') {
                    islandCount++;
                    dfs(grid, row, col);
                }
            }
        }

        return islandCount;
    }

    private void dfs(char[][] grid, int row, int col) {
        int[] rowDirections = {1, -1, 0, 0};
        int[] colDirections = {0, 0, 1, -1};

        Stack<int[]> stack = new Stack<>();
        stack.push(new int[] {row, col});
        grid[row][col] = '0'; // Mark as visited

        while (!stack.isEmpty()) {
            int[] current = stack.pop();
            int currRow = current[0], currCol = current[1];

            for (int i = 0; i < 4; i++) {
                int newRow = currRow + rowDirections[i];
                int newCol = currCol + colDirections[i];

                if (isInBounds(grid, newRow, newCol) && grid[newRow][newCol] == '1') {
                    stack.push(new int[] {newRow, newCol});
                    grid[newRow][newCol] = '0'; // Mark as visited
                }
            }
        }
    }

    private boolean isInBounds(char[][] grid, int row, int col) {
        return row >= 0 && row < grid.length && col >= 0 && col < grid[0].length;
    }

    public static void main(String[] args) {
        NumberOfIslandsDFS solution = new NumberOfIslandsDFS();

        char[][] grid1 = {
            {'1', '1', '1', '1', '0'},
            {'1', '1', '0', '1', '0'},
            {'1', '1', '0', '0', '0'},
            {'0', '0', '0', '0', '0'}
        };

        char[][] grid2 = {
            {'1', '1', '0', '0', '0'},
            {'1', '1', '0', '0', '0'},
            {'0', '0', '1', '0', '0'},
            {'0', '0', '0', '1', '1'}
        };

        System.out.println("Number of islands in grid1: " + solution.numIslands(grid1)); // Output: 1
        System.out.println("Number of islands in grid2: " + solution.numIslands(grid2)); // Output: 3
    }
}
