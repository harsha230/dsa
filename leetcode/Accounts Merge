Approach 1 

This solution to the Accounts Merge problem uses Depth-First Search (DFS) and an adjacency list to group emails that belong to the same account. 
It first builds an adjacency list where each email is connected to others in the same account, treating the first email as the root. 
Then, using DFS, it traverses the graph to find connected components, i.e., all emails belonging to the same person, while skipping visited emails. 
Each merged account (connected component) is sorted, and the account name is added at the beginning of the list. Finally, all merged accounts are returned.
The time complexity is approximately O(N + K log K), where N is the total number of emails and K is the number of emails per group (due to sorting). 
The space complexity is O(N) due to the storage of the adjacency list and the visited set.

class Solution {
    HashSet<String> visited = new HashSet<>();
    Map<String, List<String>> adjacent = new HashMap<String, List<String>>();
    
    private void DFS(List<String> mergedAccount, String email) {
        visited.add(email);
        // Add the email vector that contains the current component's emails
        mergedAccount.add(email);
        
        if (!adjacent.containsKey(email)) {
            return;
        }
        
        for (String neighbor : adjacent.get(email)) {
            if (!visited.contains(neighbor)) {
                DFS(mergedAccount, neighbor);
            }
        }
    }
    
    public List<List<String>> accountsMerge(List<List<String>> accountList) {
        int accountListSize = accountList.size();
        
        for (List<String> account : accountList) {
            int accountSize = account.size();
            
            // Building adjacency list
            // Adding edge between first email to all other emails in the account
            String accountFirstEmail = account.get(1);
            for (int j = 2; j < accountSize; j++) {
                String accountEmail = account.get(j);
                
                if (!adjacent.containsKey(accountFirstEmail)) {
                    adjacent.put(accountFirstEmail, new ArrayList<String>());
                }
                adjacent.get(accountFirstEmail).add(accountEmail);
                
                if (!adjacent.containsKey(accountEmail)) {
                    adjacent.put(accountEmail, new ArrayList<String>());
                }
                adjacent.get(accountEmail).add(accountFirstEmail);
            }
        }
        
        // Traverse over all th accounts to store components
        List<List<String>> mergedAccounts = new ArrayList<>();
        for (List<String> account : accountList) {
            String accountName = account.get(0);
            String accountFirstEmail = account.get(1);
            
            // If email is visited, then it's a part of different component
            // Hence perform DFS only if email is not visited yet
            if (!visited.contains(accountFirstEmail)) {
                List<String> mergedAccount = new ArrayList<>();
                // Adding account name at the 0th index
                mergedAccount.add(accountName);
                
                DFS(mergedAccount, accountFirstEmail);
                Collections.sort(mergedAccount.subList(1, mergedAccount.size())); 
                mergedAccounts.add(mergedAccount);
            }
        }
        
        return mergedAccounts;
    }
}

Approach 2: Disjoint Set Union (DSU)

This solution to the Accounts Merge problem employs the Disjoint Set Union (DSU) data structure to efficiently group emails that belong to the same user.
It starts by initializing a DSU where each account is treated as its own group. Then, it processes each email in the accounts, 
using the emailGroup map to track which account an email belongs to. When the same email appears in multiple accounts, it unites the corresponding 
groups using the DSU's unionBySize method. After building the union of accounts, it identifies the representative for each group and gathers 
all emails under that representative. Finally, it sorts the emails within each group and prepends the account holder's name before returning the merged list. 
This approach leverages path compression and union by size for efficiency, giving a time complexity of O(A log A), where A is the total number of accounts and emails, 
while the space complexity is O(A) for storing DSU and auxiliary data structures.

This solution to the accounts merge problem uses a Union-Find (DSU) structure to group emails belonging to the same account.
The total time complexity is O(A log A), where A is the total number of emails across all accounts. 
The DSU operations (unionBySize and findRepresentative) are optimized using path compression and union by size, 
making each operation nearly constant time, i.e., O(log A) in the amortized sense. Iterating through all accounts and emails takes O(A)
time as we process each email once. Additionally, after grouping emails by their representative components, we need to sort each email list, 
contributing O(k log k) per list, which sums up to O(A log A) in the worst case. Thus, the time complexity primarily comes from iterating over the emails and 
sorting the email groups.


class DSU {
    int representative [];
    int size [];
    
    DSU(int sz) {
        representative = new int[sz];
        size = new int[sz];
        
        for (int i = 0; i < sz; ++i) {
            // Initially each group is its own representative
            representative[i] = i;
            // Intialize the size of all groups to 1
            size[i] = 1;
        }
    }
    
    // Finds the representative of group x
    public int findRepresentative(int x) {
        if (x == representative[x]) {
            return x;
        }
        
        // This is path compression
        return representative[x] = findRepresentative(representative[x]);
    }
    
    // Unite the group that contains "a" with the group that contains "b"
    public void unionBySize(int a, int b) {
        int representativeA = findRepresentative(a);
        int representativeB = findRepresentative(b);
        
        // If nodes a and b already belong to the same group, do nothing.
        if (representativeA == representativeB) {
            return;
        }
        
        // Union by size: point the representative of the smaller
        // group to the representative of the larger group.
        if (size[representativeA] >= size[representativeB]) {
            size[representativeA] += size[representativeB];
            representative[representativeB] = representativeA;
        } else {
            size[representativeB] += size[representativeA];
            representative[representativeA] = representativeB;
        }
    }
}

class Solution {
    public List<List<String>> accountsMerge(List<List<String>> accountList) {
        int accountListSize = accountList.size();
        DSU dsu = new DSU(accountListSize);
        
        // Maps email to their component index
        Map<String, Integer> emailGroup = new HashMap<>();
        
        for (int i = 0; i < accountListSize; i++) {
            int accountSize = accountList.get(i).size();
            
            for (int j = 1; j < accountSize; j++) {
                String email = accountList.get(i).get(j);
                String accountName = accountList.get(i).get(0);
                
                // If this is the first time seeing this email then
                // assign component group as the account index
                if (!emailGroup.containsKey(email)) {
                    emailGroup.put(email, i);
                } else {
                    // If we have seen this email before then union this
                    // group with the previous group of the email
                    dsu.unionBySize(i, emailGroup.get(email));
                }
            }
        }
        
        // Store emails corresponding to the component's representative
        Map<Integer, List<String>> components = new HashMap<Integer, List<String>>();
        for (String email : emailGroup.keySet()) {
            int group = emailGroup.get(email);
            int groupRep = dsu.findRepresentative(group);
            
            if (!components.containsKey(groupRep)) {
                components.put(groupRep, new ArrayList<String>());
            }
            
            components.get(groupRep).add(email);
        }
        
        // Sort the components and add the account name
        List<List<String>> mergedAccounts = new ArrayList<>();
        for (int group : components.keySet()) {
            List<String> component = components.get(group);
            Collections.sort(component); 
            component.add(0, accountList.get(group).get(0));
            mergedAccounts.add(component);
        }
        
        return mergedAccounts;
    }
}





