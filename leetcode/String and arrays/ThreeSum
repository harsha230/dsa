Solution 1 sorting

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res= new  ArrayList<>();
        Arrays.sort(nums);
        for(int i=0;i<nums.length && nums[i]<=0;i++){
            if(i==0 || nums[i-1]!=nums[i]){
                find(res,i,nums);
            }
        }
        return res;
        
    }

    void find(List<List<Integer>> res,int i, int[] nums){
           HashSet<Integer> seen= new HashSet<Integer>();
           for(int j=i+1;j<nums.length;j++){
               int complement= -(nums[i]+nums[j]);
             if(seen.contains(complement)){
                res.add(Arrays.asList(complement,nums[i],nums[j]));
                while (j + 1 < nums.length && nums[j] == nums[j + 1]) ++j;
             }
             seen.add(nums[j]);
           }


    }
}





Solution 2

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> res = new HashSet<>();
        Set<Integer> dups = new HashSet<>();
        Map<Integer, Integer> seen = new HashMap<>();
        for (int i = 0; i < nums.length; ++i) if (dups.add(nums[i])) {
            for (int j = i + 1; j < nums.length; ++j) {
                int complement = -nums[i] - nums[j];
                if (seen.containsKey(complement) && seen.get(complement) == i) {
                    List<Integer> triplet = Arrays.asList(
                        nums[i],
                        nums[j],
                        complement
                    );
                    Collections.sort(triplet);
                    res.add(triplet);
                }
                seen.put(nums[j], i);
            }
        }
        return new ArrayList(res);
    }
}
