DFS
class Solution {

    Map<Node,Node> visited= new HashMap<Node,Node>();
    public Node cloneGraph(Node node) {
        if(node==null){
            return null;
        }

        if(visited.containsKey(node)){
            return visited.get(node);
        }
        ArrayList<Node> al= new ArrayList<Node>();
        Node newNode= new Node(node.val,al);

        visited.put(node, newNode);

        for(Node oode: node.neighbors){
            
            newNode.neighbors.add(cloneGraph(oode));

        }

        return newNode;
    }
}
Time Complexity: O(N+M), where N is a number of nodes (vertices) and M is a number of edges.
Space Complexity: O(N). This space is occupied by the visited hash map and in addition to that, 
space would also be occupied by the recursion stack since we are adopting a recursive approach here. 
The space occupied by the recursion stack would be equal to O(H) where H is the height of the graph. Overall, the space complexity would be O(N).

BFS


class Node {
    public int val;
    public List<Node> neighbors;

    public Node() {}

    public Node(int _val,List<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};

class Solution {
    public Node cloneGraph(Node node) {
        if (node == null) {
            return node;
        }

        // Hash map to save the visited node and it's respective clone
        // as key and value respectively. This helps to avoid cycles.
        HashMap<Node, Node> visited = new HashMap();

        // Put the first node in the queue
        LinkedList<Node> queue = new LinkedList<Node>();
        queue.add(node);
        // Clone the node and put it in the visited dictionary.
        visited.put(node, new Node(node.val, new ArrayList()));

        // Start BFS traversal
        while (!queue.isEmpty()) {
            // Pop a node say "n" from the from the front of the queue.
            Node n = queue.remove();
            // Iterate through all the neighbors of the node "n"
            for (Node neighbor : n.neighbors) {
                if (!visited.containsKey(neighbor)) {
                    // Clone the neighbor and put in the visited, if not present already
                    visited.put(
                        neighbor,
                        new Node(neighbor.val, new ArrayList())
                    );
                    // Add the newly encountered node to the queue.
                    queue.add(neighbor);
                }
                // Add the clone of the neighbor to the neighbors of the clone node "n".
                visited.get(n).neighbors.add(visited.get(neighbor));
            }
        }

        // Return the clone of the node from visited.
        return visited.get(node);
    }
}

Complexity Analysis

Time Complexity : O(N+M), where N is a number of nodes (vertices) and M is a number of edges.

Space Complexity : O(N). This space is occupied by the visited dictionary and in addition to that,
space would also be occupied by the queue since we are adopting the BFS approach here.
The space occupied by the queue would be equal to O(W) where W is the width of the graph. Overall, the space complexity would be O(N).

