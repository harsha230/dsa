Approach 1

The `maxDepth` method calculates the maximum depth of a binary tree by recursively finding the depth of the left and right subtrees,
then returning the larger of the two plus one to account for the current node. If the `root` is `null`, it returns `0`, as an empty tree
has zero depth. This approach has a time complexity of \(O(n)\), where \(n\) is the number of nodes, since each node is visited once.
The space complexity is \(O(h)\), where \(h\) is the tree height, due to the recursion stack; this is \(O(\log n)\) for balanced trees and
\(O(n)\) in the worst case of a skewed tree.

class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null) {
            return 0;
        } else {
            int left_height = maxDepth(root.left);
            int right_height = maxDepth(root.right);
            return java.lang.Math.max(left_height, right_height) + 1;
        }
    }
}

APproach 2
The provided method for calculating the maximum depth of a binary tree employs an iterative approach using two stacks: one for the 
tree nodes and another for tracking the corresponding depths. The algorithm initializes by checking if the root is null, returning 
0 if it is. It then adds the root node and its depth (1) to the stacks. As long as there are nodes in the stack, it continuously pops
the last node and its depth, updating the maximum depth found. For each node, it pushes its left and right children onto the stack 
along with their respective depths. This approach ensures that all nodes are visited without using recursion. The time complexity 
of this algorithm is O(N), where N is the number of nodes in the tree, as each node is processed once. The space complexity is also O(N)
in the worst case due to the storage of nodes in the stack, especially in skewed trees. Overall, this method is efficient and avoids the
pitfalls of recursion while effectively determining the tree's maximum depth.

class Solution {
    public int maxDepth(TreeNode root) {
        LinkedList<TreeNode> stack = new LinkedList<>();
        LinkedList<Integer> depths = new LinkedList<>();
        if (root == null) return 0;

        stack.add(root);
        depths.add(1);

        int depth = 0, current_depth = 0;
        while (!stack.isEmpty()) {
            root = stack.pollLast();
            current_depth = depths.pollLast();
            if (root != null) {
                depth = Math.max(depth, current_depth);
                stack.add(root.left);
                stack.add(root.right);
                depths.add(current_depth + 1);
                depths.add(current_depth + 1);
            }
        }
        return depth;
    }
}
