The brute force approach to determine if a number is strobogrammatic involves checking each digit of the string against a predefined set of valid strobogrammatic pairs. 
We start by iterating through the string from the first to the last digit, verifying if each digit is valid (i.e., '0', '1', '6', '8', or '9'). If any digit is invalid, 
we can immediately conclude that the number is not strobogrammatic. Next, we build the rotated string by iterating backward through the original string, using a StringBuilder 
to append the corresponding "rotated" digit for each valid input digit. This results in a time complexity of O(N) since we traverse the string twiceâ€”once to check for valid digits and once to build the rotated version. 
The space complexity is O(N) due to the StringBuilder,
which requires linear space relative to the length of the input string to store the rotated representation.
class Solution {
    public boolean isStrobogrammatic(String num) {
        
        // Initialise a map with the five-digit rotation rules
        Map<Character, Character> rotatedDigits = new HashMap<> (
            Map.of('0', '0', '1', '1', '6', '9', '8', '8', '9', '6'));
        
        StringBuilder rotatedStringBuilder = new StringBuilder();
        
        // Remember that we want to loop backwards through the string
        for (int i = num.length() - 1; i >= 0; i--) {
            char c = num.charAt(i);
            if (!rotatedDigits.containsKey(c)) {
                return false; // This must be an invalid digit.
            }
            rotatedStringBuilder.append(rotatedDigits.get(c));
        }
        
        String rotatedString = rotatedStringBuilder.toString();
        return num.equals(rotatedString);
    }
}

Approach 2: Two Pointers

class Solution {

    public boolean isStrobogrammatic(String num) {
        
        Map<Character, Character> rotatedDigits = new HashMap<> (
            Map.of('0', '0', '1', '1', '6', '9', '8', '8', '9', '6'));
         
        // Java allows us to have more than one iteration variable. 
        for (int left = 0, right = num.length() - 1; left <= right; left++, right--) {
            char leftChar = num.charAt(left);
            char rightChar = num.charAt(right);            
            if (!rotatedDigits.containsKey(leftChar) || rotatedDigits.get(leftChar) != rightChar) {
                return false;
            }
        }
        return true;
        
    }
}
Time complexity : O(N).

For each of the N digits in the string, we're doing a single lookup and comparison.

Space complexity : O(1).

We are only using constant extra space. This is an in-place algorithm.
