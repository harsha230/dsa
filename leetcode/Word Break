Approach 1 Breadth-First Search
class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> words = new HashSet<>(wordDict);
        Queue<Integer> queue = new LinkedList<>();
        boolean[] seen = new boolean[s.length() + 1];
        queue.add(0);

        while (!queue.isEmpty()) {
            int start = queue.remove();
            if (start == s.length()) {
                return true;
            }

            for (int end = start + 1; end <= s.length(); end++) {
                if (seen[end]) {
                    continue;
                }

                if (words.contains(s.substring(start, end))) {
                    queue.add(end);
                    seen[end] = true;
                }
            }
        }

        return false;
    }
}
Time complexity: O(n^3+m⋅k)

There are O(n) nodes. Because of seen, we never visit a node more than once. At each node, we iterate over the nodes in front of the current node, of which there are O(n). For each node end, we create a substring, which also costs O(n).

Therefore, handling a node costs O(n2), so the BFS could cost up to O(n3). Finally, we also spent O(m⋅k) to create the set words.

Space complexity: O(n+m⋅k)

We use O(n) space for queue and seen. We use O(m⋅k) space for the set words.

Approach 2 top down

class Solution {
    private String s;
    private List<String> wordDict;
    private int[] memo;

    private boolean dp(int i) {
        if (i < 0) return true;

        if (memo[i] != -1) {
            return memo[i] == 1;
        }

        for (String word : wordDict) {
            // Handle out of bounds case
            if (i - word.length() + 1 < 0) {
                continue;
            }

            if (
                s.substring(i - word.length() + 1, i + 1).equals(word) &&
                dp(i - word.length())
            ) {
                memo[i] = 1;
                return true;
            }
        }

        memo[i] = 0;
        return false;
    }

    public boolean wordBreak(String s, List<String> wordDict) {
        this.s = s;
        this.wordDict = wordDict;
        this.memo = new int[s.length()];
        Arrays.fill(this.memo, -1);
        return dp(s.length() - 1);
    }
}
Time complexity: O(n⋅m⋅k)

There are n states of dp(i). Because of memoization, we only calculate each state once. To calculate a state, we iterate over m words, and for each word perform some substring operations which costs O(k). Therefore, calculating a state costs O(m⋅k), and we need to calculate O(n) states.

Space complexity: O(n)

The data structure we use for memoization and the recursion call stack can use up to O(n) space.


Approach 3: Bottom-Up Dynamic Programming
class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        boolean[] dp = new boolean[s.length()];
        for (int i = 0; i < s.length(); i++) {
            for (String word : wordDict) {
                // Handle out of bounds case
                if (i < word.length() - 1) {
                    continue;
                }

                if (i == word.length() - 1 || dp[i - word.length()]) {
                    if (
                        s.substring(i - word.length() + 1, i + 1).equals(word)
                    ) {
                        dp[i] = true;
                        break;
                    }
                }
            }
        }

        return dp[s.length() - 1];
    }
}

Given n as the length of s, m as the length of wordDict, and k as the average length of the words in wordDict,

Time complexity: O(n⋅m⋅k)

The logic behind the time complexity is identical to the previous approach. It costs us O(m⋅k) to calculate each state, and we calculate O(n) states in total.

Space complexity: O(n)

We use an array dp of length n.



Approach 4 Tries
class TrieNode {
    boolean isWord; // Indicates if this node marks the end of a valid word
    Map<Character, TrieNode> children; // Maps characters to child TrieNodes

    TrieNode() {
        this.children = new HashMap<>(); // Initializes the children map
    }
}

class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        // Step 1: Build the Trie from wordDict
        TrieNode root = new TrieNode();
        for (String word : wordDict) {
            TrieNode curr = root; // Start from the root for each new word
            for (char c : word.toCharArray()) {
                // Insert character into Trie
                if (!curr.children.containsKey(c)) {
                    curr.children.put(c, new TrieNode());
                }
                curr = curr.children.get(c); // Move to the child node
            }
            curr.isWord = true; // Mark the end of the word
        }

        // Step 2: Initialize the DP array
        boolean[] dp = new boolean[s.length()];
        for (int i = 0; i < s.length(); i++) {
            // Check if we can start segmenting from here
            if (i == 0 || dp[i - 1]) {
                TrieNode curr = root; // Reset current node to the root of the Trie
                for (int j = i; j < s.length(); j++) {
                    char c = s.charAt(j);
                    if (!curr.children.containsKey(c)) {
                        // No words exist starting with this character, break the loop
                        break;
                    }

                    curr = curr.children.get(c); // Move to the child node
                    if (curr.isWord) {
                        // Mark this end index as valid in the DP array
                        dp[j] = true;
                    }
                }
            }
        }

        // Step 3: Return whether the whole string can be segmented
        return dp[s.length() - 1];
    }
}
Given n as the length of s, m as the length of wordDict, and k as the average length of the words in wordDict,

Time complexity: O(n^2 +m⋅k)

Building the trie involves iterating over all characters of all words. This costs O(m⋅k).

Once we build the trie, we calculate dp. For each i, we iterate over all the indices after i. We have a basic nested for loop which costs O(n^2) to handle all dp[i].

Space complexity: O(n+m⋅k)

The dp array takes O(n) space. The trie can have up to m⋅k nodes in it.

Approach 5
Here, we let dp[i] hold the answer to the question: "is it possible to form s up to a length of i? To find the answer for each index, 
instead of iterating over the words in wordDict and checking if a word ends at the current index i, we will instead iterate over all substrings that end before index i.
If we find one of these substrings is in wordDict and we can form the string prior to the substring, then dp[i] = true.

class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        int n = s.length();
        Set<String> words = new HashSet<>(wordDict);
        boolean[] dp = new boolean[n + 1];
        dp[0] = true;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < i; j++) {
                if (dp[j] && words.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }

        return dp[n];
    }
}
Given n as the length of s, m as the length of wordDict, and k as the average length of the words in wordDict,

Time complexity: O(n 
3
 +m⋅k)

First, we spend O(m⋅k) to convert wordDict into a set. Then we have a nested loop over n, which iterates O(n 
2
 ) times. For each iteration, we have a substring operation which could cost up to O(n). Thus this nested loop costs O(n 
3
 ).

Space complexity: O(n+m⋅k)

The dp array takes O(n) space. The set words takes up O(m⋅k) space.

