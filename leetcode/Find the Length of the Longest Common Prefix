
Approach 1

This approach builds a set of all possible prefixes from integers in `arr1` using a **HashSet**, allowing for quick lookups when 
comparing against integers in `arr2`. For each number in `arr1`, it repeatedly removes the last digit to generate all prefixes and stores 
them in the set. Then, for each number in `arr2`, it similarly removes digits until it finds a prefix in the set or reduces the number to zero. 
The longest matching prefix length is tracked using `Math.log10` to compute the number of digits.The time complexity of this approach is **O(m ⋅ log₁₀M + n ⋅ log₁₀N)**,
where **m** is the length of `arr1`, **n** is the length of `arr2`, **M** is the maximum value in `arr1`, and **N** is the maximum value in `arr2`. For each number in 
`arr1`, we generate prefixes by repeatedly dividing the number by 10, which takes **O(log₁₀M)** for each number, and similarly, for each number in `arr2`, 
we check prefixes in **O(log₁₀N)** time. The space complexity is **O(m ⋅ log₁₀M)** since each number in `arr1` can generate up to **log₁₀M** prefixes, 
and they are stored in a set.

import java.util.HashSet;

class Solution {

    public int longestCommonPrefix(int[] arr1, int[] arr2) {
        HashSet<Integer> arr1Prefixes = new HashSet<Integer>(); // Set to store all prefixes from arr1

        // Step 1: Build all possible prefixes from arr1
        for (int val : arr1) {
            while (!arr1Prefixes.contains(val) && val > 0) {
                // Insert current value as a prefix
                arr1Prefixes.add(val);
                // Generate the next shorter prefix by removing the last digit
                val /= 10;
            }
        }

        int longestPrefix = 0;

        // Step 2: Check each number in arr2 for the longest matching prefix
        for (int val : arr2) {
            while (!arr1Prefixes.contains(val) && val > 0) {
                // Reduce val by removing the last digit if not found in the prefix set
                val /= 10;
            }
            if (val > 0) {
                // Length of the matched prefix using log10 to determine the number of digits
                longestPrefix = Math.max(
                    longestPrefix,
                    (int) Math.log10(val) + 1
                );
            }
        }

        return longestPrefix;
    }
}





Approach 2 trie

class TrieNode {

    // Each node has up to 10 possible children (digits 0-9)
    TrieNode[] children = new TrieNode[10];
}

class Trie {

    TrieNode root = new TrieNode();

    // Insert a number into the Trie by treating it as a string of digits
    void insert(int num) {
        TrieNode node = root;
        String numStr = Integer.toString(num);
        for (char digit : numStr.toCharArray()) {
            int idx = digit - '0';
            if (node.children[idx] == null) {
                node.children[idx] = new TrieNode();
            }
            node = node.children[idx];
        }
    }

    // Find the longest common prefix for a number in arr2 with the Trie
    int findLongestPrefix(int num) {
        TrieNode node = root;
        String numStr = Integer.toString(num);
        int len = 0;

        for (char digit : numStr.toCharArray()) {
            int idx = digit - '0';
            if (node.children[idx] != null) {
                // Increase length if the current digit matches
                len++;
                node = node.children[idx];
            } else {
                // Stop if no match for the current digit
                break;
            }
        }
        return len;
    }
}

class Solution {

    public int longestCommonPrefix(int[] arr1, int[] arr2) {
        Trie trie = new Trie();

        // Step 1: Insert all numbers from arr1 into the Trie
        for (int num : arr1) {
            trie.insert(num);
        }

        int longestPrefix = 0;

        // Step 2: Find the longest prefix match for each number in arr2
        for (int num : arr2) {
            int len = trie.findLongestPrefix(num);
            longestPrefix = Math.max(longestPrefix, len);
        }

        return longestPrefix;
    }
}

Time Complexity: O(m⋅d+n⋅d)=O(m+n)

For each number in arr1, we insert it into the Trie by processing each digit. Since each number has up to d digits,
inserting a single number takes O(d) time. Therefore, inserting all m numbers from arr1 into the Trie takes O(m⋅d) time.

For each number in arr2, we check how long its prefix matches with any prefix in the Trie. This involves traversing up to
d digits of the number, which takes O(d) time per number. For all n numbers in arr2, the time complexity for this step is O(n⋅d).

Overall, the total time complexity is O(m⋅d+n⋅d)=O(m+n)

Space Complexity: O(m⋅d)=O(m)

Each node in the Trie represents a digit (0-9), and each number from arr1 can contribute up to d nodes. 
Thus, the total space used by the Trie for storing all prefixes is O(m⋅d).

The algorithm uses constant space for variables like longestPrefix and loop variables,
which is negligible compared to the space used by the Trie.

Thus, the total space complexity is O(m⋅d)=O(m).
