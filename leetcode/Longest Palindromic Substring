APproach 1
class Solution {
    public String longestPalindrome(String s) {
        for (int length = s.length(); length > 0; length--) {
            for (int start = 0; start <= s.length() - length; start++) {
                if (check(start, start + length, s)) {
                    return s.substring(start, start + length);
                }
            }
        }

        return "";
    }

    private boolean check(int i, int j, String s) {
        int left = i;
        int right = j - 1;

        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }

            left++;
            right--;
        }

        return true;
    }
}
Time complexity: O(n^3)
APproach 2 Dynamic Programming

class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        boolean[][] dp = new boolean[n][n];
        int[] ans = new int[] { 0, 0 };

        for (int i = 0; i < n; i++) {
            dp[i][i] = true;
        }

        for (int i = 0; i < n - 1; i++) {
            if (s.charAt(i) == s.charAt(i + 1)) {
                dp[i][i + 1] = true;
                ans[0] = i;
                ans[1] = i + 1;
            }
        }

        for (int diff = 2; diff < n; diff++) {
            for (int i = 0; i < n - diff; i++) {
                int j = i + diff;
                if (s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1]) {
                    dp[i][j] = true;
                    ans[0] = i;
                    ans[1] = j;
                }
            }
        }

        int i = ans[0];
        int j = ans[1];
        return s.substring(i, j + 1);
    }
}

Time complexity: O(n^2)

We declare an n * n table dp, which takes O(n^2) time. We then populate O(n^2) states i, j - each state takes O(1) time to compute.

Space complexity: O(n^2)

The table dp takes O(n^2) space.


Approach 3 
The provided solution employs the **center expansion** technique to find the longest palindromic substring in a given string \( s \). The algorithm iterates through each character, 
treating each character (and each pair of consecutive characters) as potential centers of palindromes. For each center, it expands outward symmetrically until the characters no longer match, 
calculating the length of the palindrome. It updates the indices of the longest palindrome found so far based on these lengths. The time complexity of this approach is \( O(n^2) \), where \( n \) 
is the length of the string, due to the nested nature of the expansion for each character. The space complexity is \( O(1) \) since it uses a fixed amount of space for variables and does not require 
any additional data structures proportional to the input size. Overall, this method effectively identifies the longest palindromic substring while maintaining efficient space usage.


class Solution {
    public String longestPalindrome(String s) {
        int[] ans = new int[] { 0, 0 };

        for (int i = 0; i < s.length(); i++) {
            int oddLength = expand(i, i, s);
            if (oddLength > ans[1] - ans[0] + 1) {
                int dist = oddLength / 2;
                ans[0] = i - dist;
                ans[1] = i + dist;
            }

            int evenLength = expand(i, i + 1, s);
            if (evenLength > ans[1] - ans[0] + 1) {
                int dist = (evenLength / 2) - 1;
                ans[0] = i - dist;
                ans[1] = i + 1 + dist;
            }
        }

        int i = ans[0];
        int j = ans[1];
        return s.substring(i, j + 1);
    }

    private int expand(int i, int j, String s) {
        int left = i;
        int right = j;

        while (
            left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)
        ) {
            left--;
            right++;
        }

        return right - left - 1;
    }
}

