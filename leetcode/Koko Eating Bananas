The given approach uses a brute-force method to determine the minimum eating speed for Koko to finish all piles of bananas within `h` hours. 
The algorithm starts with an initial speed of 1 and iterates through each pile, calculating the total hours spent at that speed. 
For each pile, the number of hours is determined using the ceiling of `pile / speed`, and this value is accumulated for all piles. 
If the total hours exceed `h`, the speed is incremented, and the process repeats until a valid speed is found that allows Koko to finish all piles within the given time. 
While this approach guarantees correctness, it is inefficient as it continuously increases the speed one by one until a solution is found.

The time complexity of this solution is **O(max(piles) * n)**, where `n` is the number of piles and `max(piles)` is the largest pile of bananas. 
This is because in the worst case, the speed could increase all the way up to the size of the largest pile, and for each speed, the algorithm checks all `n` piles. 
The space complexity is **O(1)**, as the algorithm uses only a constant amount of extra space.

class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        // Start at an eating speed of 1.
        int speed = 1;

        while (true) {
            // hourSpent stands for the total hour Koko spends with 
            // the given eating speed.
            int hourSpent = 0;

            // Iterate over the piles and calculate hourSpent.
            // We increase the hourSpent by ceil(pile / speed)
            for (int pile : piles) {
                hourSpent += Math.ceil((double) pile / speed);
                if (hourSpent > h) {
                    break;
                }
            }

            // Check if Koko can finish all the piles within h hours,
            // If so, return speed. Otherwise, let speed increment by
            // 1 and repeat the previous iteration.
            if (hourSpent <= h) {
                return speed;
            } else {
                speed += 1;
            }            
        }
    }
}

Approach 2
This solution efficiently finds the minimum eating speed using a binary search approach, significantly improving over the brute-force method.
The algorithm starts by setting the lower bound (left) to 1 and the upper bound (right) to the largest pile size, representing the range of possible eating speeds. 
It then performs a binary search to gradually narrow down this range. For each mid-point speed, it calculates the total hours Koko would spend eating at that speed and 
compares it to h. If Koko can finish within h hours, it reduces the upper bound to explore smaller speeds; otherwise,
it increases the lower bound. This binary search process continues until the bounds converge, giving the minimum valid eating speed. 
The time complexity is O(n log(max(piles))), where n is the number of piles and max(piles) is the largest pile, while the space complexity is O(1) due to
the use of constant extra space.

class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        // Initalize the left and right boundaries 
        int left = 1, right = 1;
        for (int pile : piles) {
            right = Math.max(right, pile);
        }

        while (left < right) {
            // Get the middle index between left and right boundary indexes.
            // hourSpent stands for the total hour Koko spends.
            int middle = (left + right) / 2;
            int hourSpent = 0;

            // Iterate over the piles and calculate hourSpent.
            // We increase the hourSpent by ceil(pile / middle)
            for (int pile : piles) {
                hourSpent += Math.ceil((double) pile / middle);
            }

            // Check if middle is a workable speed, and cut the search space by half.
            if (hourSpent <= h) {
                right = middle;
            } else {
                left = middle + 1;
            }
        }

        // Once the left and right boundaries coincide, we find the target value,
        // that is, the minimum workable eating speed.
        return right;
    }
}


Given an int array wood representing the length of n pieces of wood and an int k. 
It is required to cut these pieces of wood such that more or equal to k pieces of the same length len are cut. What is the longest len you can get?


Example 1:


Input: wood = [5, 9, 7], k = 3
Output: 5
Explanation: 
5 -> 5
9 -> 5 + 4
7 -> 5 + 2


class Solution {
    public int maxLength(int[] wood, int k) {
        // Initialize the left and right boundaries for binary search.
        int left = 1, right = 0;
        for (int w : wood) {
            right = Math.max(right, w); // Set the maximum length as the longest piece.
        }

        // Perform binary search.
        while (left < right) {
            int middle = (left + right + 1) / 2; // Get the middle value.

            // Calculate how many pieces we can get with the current middle length.
            int pieces = 0;
            for (int w : wood) {
                pieces += w / middle;
            }

            // If we can get at least k pieces, it means we can try a larger length.
            if (pieces >= k) {
                left = middle; // Valid length, search in the right half.
            } else {
                right = middle - 1; // Too few pieces, search in the left half.
            }
        }

        // Once the search is complete, left will contain the maximum length.
        return left;
    }
}


