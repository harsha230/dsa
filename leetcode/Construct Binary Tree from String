Approach 1 Reursive

The provided code implements a recursive approach to construct a binary tree from a given string representation, 
where the format specifies the root value followed by optional left and right children enclosed in parentheses. 
The `str2tree` method initiates the process, calling `str2treeInternal`, which parses the string recursively. 
The `getNumber` helper function extracts integers, handling potential negative signs. The algorithm processes 
each character in the string, building the tree nodes based on the parentheses that denote child relationships. 
The time complexity of this approach is **O(n)**, where **n** is the length of the input string, as each character 
is processed exactly once. The space complexity is **O(h)**, where **h** is the height of the tree, representing the maximum 
depth of the recursive call stack, which could be up to **O(n)** in the worst case (for skewed trees) or **O(log n)** for balanced trees.


class Solution {
    public TreeNode str2tree(String s) {
        return this.str2treeInternal(s, 0).getKey();
    }
    
    public Pair<Integer, Integer> getNumber(String s, int index) {
        
        boolean isNegative = false;
        
        // A negative number
        if (s.charAt(index) == '-') {
            isNegative = true;
            index++;
        }
            
        int number = 0;
        while (index < s.length() && Character.isDigit(s.charAt(index))) {
            number = number * 10 + (s.charAt(index) - '0');
            index++;
        }
        
        return new Pair<Integer, Integer>(isNegative ? -number : number, index);
    } 
    
    public Pair<TreeNode, Integer> str2treeInternal(String s, int index) {
        
        if (index == s.length()) {
            return new Pair<TreeNode, Integer>(null, index);
        }
        
        // Start of the tree will always contain a number representing
        // the root of the tree. So we calculate that first.
        Pair<Integer, Integer> numberData = this.getNumber(s, index);
        int value = numberData.getKey();
        index = numberData.getValue();
        
        TreeNode node = new TreeNode(value);
        Pair<TreeNode, Integer> data;
        
        // Next, if there is any data left, we check for the first subtree
        // which according to the problem statement will always be the left child.
        if (index < s.length() && s.charAt(index) == '(') {
            data = this.str2treeInternal(s, index + 1);
            node.left = data.getKey();
            index = data.getValue();
        }
            
        
        // Indicates a right child
        if (node.left != null && index < s.length() && s.charAt(index) == '(') {
            data = this.str2treeInternal(s, index + 1);
            node.right = data.getKey();
            index = data.getValue();
        }
            
        
        return new Pair<TreeNode, Integer>(node, index < s.length() && s.charAt(index) == ')' ? index + 1 : index);
    }
}


Approach 2 using stack

This approach constructs a binary tree from a string by using a stack to manage node relationships and 
parent-child associations. It iterates through the input string, parsing integer values for nodes and
managing parentheses to build the tree structure. For each integer encountered, it creates a new `TreeNode`.
If the stack has a parent node, the new node is added as the left or right child, based on availability. 
A `(` signifies the start of a subtree, while `)` signals the end of the current subtree, prompting a pop 
operation to return to the parent node. The root node is ultimately the first element in the stack.

The **time complexity** is \(O(n)\), where \(n\) is the length of the string, as each character is processed once. 
The **space complexity** is \(O(h)\), where \(h\) is the height of the tree, due to the stack potentially holding up
to `h` nodes at once during the tree's construction.


class Solution {
     public TreeNode str2tree(String s) {
        if (s == null || s.isEmpty()) return null;
        
        Stack<TreeNode> stack = new Stack<>();
        int i = 0;
        
        while (i < s.length()) {
            if (s.charAt(i) == ')') {
                stack.pop(); // End of a subtree
                i++;
            } else if (s.charAt(i) == '(') {
                i++; // Move to the next character after '('
            } else { 
                // Read the integer value (it can be multiple digits or negative)
                int start = i;
                while (i < s.length() && (Character.isDigit(s.charAt(i)) || s.charAt(i) == '-')) {
                    i++;
                }
                int value = Integer.parseInt(s.substring(start, i));
                
                // Create a new node
                TreeNode node = new TreeNode(value);
                
                // If the stack is not empty, attach the node
                if (!stack.isEmpty()) {
                    TreeNode parent = stack.peek();
                    if (parent.left == null) {
                        parent.left = node;
                    } else {
                        parent.right = node;
                    }
                }
                
                // Push the current node to the stack
                stack.push(node);
            }
        }
        
        // The root of the tree is the first node pushed onto the stack
        return stack.isEmpty() ? null : stack.get(0);
    }
}

