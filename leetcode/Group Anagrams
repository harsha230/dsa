Approach 1
This approach groups anagrams by sorting each string and using the sorted version as a key in a hashmap. 
For each string, it converts it to a character array, sorts it, and then converts it back to a string (`key`).
If the `key` is not already in the hashmap, a new list is created for that key; then, the original string is added 
to the list for that key. Finally, all values in the hashmap (each list of anagrams) are returned as a list of lists.

The **time complexity** is \(O(n \cdot k \log k)\), where \(n\) is the number of strings and \(k\) is the
maximum length of a string, due to sorting each string individually. The **space complexity** is \(O(n \cdot k)\), as we store all strings in the hashmap.


class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        if (strs.length == 0) return new ArrayList();
        Map<String, List> ans = new HashMap<String, List>();
        for (String s: strs) {
            char[] ca = s.toCharArray();
            Arrays.sort(ca);
            String key = String.valueOf(ca);
            if (!ans.containsKey(key)) ans.put(key, new ArrayList());
            ans.get(key).add(s);
        }
        return new ArrayList(ans.values());
    }
}

Approach 2

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        if (strs.length == 0) return new ArrayList();
        Map<String, List> ans = new HashMap<String, List>();
        int[] count = new int[26];
        for (String s : strs) {
            Arrays.fill(count, 0);
            for (char c : s.toCharArray()) count[c - 'a']++;

            StringBuilder sb = new StringBuilder("");
            for (int i = 0; i < 26; i++) {
                sb.append('#');
                sb.append(count[i]);
            }
            String key = sb.toString();
            if (!ans.containsKey(key)) ans.put(key, new ArrayList());
            ans.get(key).add(s);
        }
        return new ArrayList(ans.values());
    }
}

This approach groups anagrams by counting character frequencies instead of sorting,
which makes it more efficient. For each string, an integer array (`count`) of size 26 
(representing each letter in the alphabet) records the frequency of each character.
A unique key for each group of anagrams is generated by appending each count to a `StringBuilder`
(with separators) to form a distinct signature. This `key` is then used in a hashmap to group anagrams.
If the key is not present in the hashmap, a new list is created for that key; otherwise, the original string is added to the list corresponding to that key.

The **time complexity** is \(O(n \cdot k)\), where \(n\) is the number of strings and \(k\) is
the maximum length of a string, as counting characters and building keys take \(O(k)\) for each string.
The **space complexity** is \(O(n \cdot k)\) for storing grouped anagrams in the hashmap.

