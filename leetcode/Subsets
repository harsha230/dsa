

Approch 1

The provided Java code defines a method `subsets` within the `Solution` class that generates all possible subsets of a given integer array `nums`.
It initializes an output list containing an empty subset and iteratively adds each number from `nums` to all existing subsets in the output list. 
For each number, it creates new subsets by appending the number to every existing subset, storing them in a temporary list called `newSubsets`, 
which is then added to the output. This approach effectively builds the power set through successive additions of each element. The time complexity 
of this algorithm is \(O(N \times 2^N)\), where \(N\) is the number of elements in the input array, as each element potentially doubles the number of subsets generated.
The space complexity is also \(O(N \times 2^N)\) due to the storage of all subsets in the output list.

class Solution {

    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> output = new ArrayList();
        output.add(new ArrayList());

        for (int num : nums) {
            List<List<Integer>> newSubsets = new ArrayList();
            for (List<Integer> curr : output) {
                List<Integer> temp = new ArrayList(curr);
                temp.add(num);
                newSubsets.add(temp);
            }
            for (List<Integer> curr : newSubsets) {
                output.add(curr);
            }
        }
        return output;
    }
}

Approach 2
The provided Java code implements a solution to generate all possible subsets (the power set) of a given integer array `nums` using a backtracking approach.
The `subsets` method iterates through all possible subset sizes \(k\) from 0 to \(n\) (the length of `nums`), calling the `backtrack` method to construct 
subsets of each size. The `backtrack` method recursively adds elements from `nums` to a current combination `curr`, adding it to the output list once 
the desired size \(k\) is reached. After exploring each combination, it removes the last added element to explore other possibilities. The time complexity
of this algorithm is \(O(N \times 2^N)\), where \(N\) is the number of elements in `nums`, as it generates all subsets, and the space complexity is also
\(O(N \times 2^N)\) due to the storage of all subsets in the output list.



class Solution {

    private List<List<Integer>> output = new ArrayList();
    private int n, k;

    public void backtrack(int first, ArrayList<Integer> curr, int[] nums) {
        if (curr.size() == k) output.add(new ArrayList(curr));
        for (int i = first; i < n; ++i) {
            curr.add(nums[i]);
            backtrack(i + 1, curr, nums);
            curr.remove(curr.size() - 1);
        }
    }

    public List<List<Integer>> subsets(int[] nums) {
        n = nums.length;
        for (k = 0; k < n + 1; ++k) {
            ArrayList<Integer> currCombo = new ArrayList<Integer>();
            backtrack(0, currCombo, nums);
        }
        return output;
    }
}


Approach 3

The provided approach uses bit manipulation to generate all possible subsets of a given array of unique integers. 
It leverages the concept of bitmasks, where each integer from `0` to `2^n - 1` (where `n` is the length of the input array) 
represents a potential subset. In each iteration of the outer loop, the integer `i` is treated as a bitmask, and the inner loop 
checks each bit position `j`. If the `j`-th bit of `i` is set (indicated by `i & (1 << j) != 0`), the corresponding element `nums[j]`
is included in the current subset. This method ensures that every combination of elements is represented, resulting in the complete power
set. The time complexity of this approach is \(O(n \cdot 2^n)\), where \(O(2^n)\) accounts for the number of subsets generated and \(O(n)\)
accounts for the operations needed to construct each subset. The space complexity is \(O(n \cdot 2^n)\) due to the storage of all subsets in the output list.


class Solution {

   public List<List<Integer>> subsets(int[] nums) {
    List<List<Integer>> output = new ArrayList();
    int n = nums.length;

    for (int i = 0; i < (1 << n); i++) { // Loop from 0 to (2^n - 1)
        List<Integer> curr = new ArrayList();
        
        for (int j = 0; j < n; j++) { // Check each bit
            if ((i & (1 << j)) != 0) { // Check if the j-th bit is set
                curr.add(nums[j]); // Add the corresponding element to the current subset
            }
        }
        
        output.add(curr); // Add the current subset to the output list
    }
    return output;
}

}
