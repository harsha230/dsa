Appproach 1 Merge Sort

This approach to finding the median of two sorted arrays uses a two-pointer technique, 
`p1` and `p2`, to merge the arrays up to the middle position without fully merging them. The `getMin()` 
function selects the smaller element between `nums1[p1]` and `nums2[p2]`, advancing the pointer accordingly. 
Depending on whether the combined length of the arrays is odd or even, the median is either the middle element
or the average of the two middle elements. The time complexity is O((m + n) / 2), where `m` and `n` are the lengths
of the two arrays, since only half of the elements are compared. The space complexity is O(1), as the solution only
uses a few extra variables without additional data structures.

class Solution {
    private int p1 = 0, p2 = 0;

    // Get the smaller value between nums1[p1] and nums2[p2] and move the pointer forwards.

    private int getMin(int[] nums1, int[] nums2) {
        if (p1 < nums1.length && p2 < nums2.length) {
            return nums1[p1] < nums2[p2] ? nums1[p1++] : nums2[p2++];
        } else if (p1 < nums1.length) {
            return nums1[p1++];
        } else if (p2 < nums2.length) {
            return nums2[p2++];
        }
        return -1;
    }

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length, n = nums2.length;
        if ((m + n) % 2 == 0) {
            for (int i = 0; i < (m + n) / 2 - 1; ++i) {
                int tmp = getMin(nums1, nums2);
            }
            return (double) (getMin(nums1, nums2) + getMin(nums1, nums2)) / 2;
        } else {
            for (int i = 0; i < (m + n) / 2; ++i) {
                int tmp = getMin(nums1, nums2);
            }
            return getMin(nums1, nums2);
        }
    }
}


Approach 2 Merge Sort

This approach uses a **binary search** technique to find the median of two sorted arrays by recursively narrowing down the search space. 
The algorithm works by comparing the middle elements of both arrays and discarding half of one array based on whether the sum of the indices
of the current middle elements is less than or greater than \( k \), the index of the desired element. If one of the arrays is exhausted, 
the \( (k - \text{start}) \)-th element of the other array is returned. For finding the median,
it handles both odd and even length cases by calling the `solve` function for the middle element 
(and two middle elements for the even case). 
Time complexity: O(log(mâ‹…n))

At each step, we cut one half off from either nums1 or nums2. If one of the arrays is emptied,
we can directly get the target from the other array in a constant time. Therefore, the total time spent depends on when one of the arrays is cut into an empty array.
In the worst-case scenario, we may need to cut both arrays before finding the target element.
One of the two arrays is cut in half at each step, thus it takes logarithmic time to empty an array. The time to empty two arrays are independent of each other.

Space complexity: O(logm+logn)

Similar to the analysis on time complexity, the recursion steps depend on the number of iterations before we cut an array into an empty array. 
In the worst-case scenario, we need O(logm+logn) recursion steps.

However, during the recursive self-call, we only need to maintain 4 pointers: a_start, a_end, b_start and b_end. The last step of the
function is to call itself, so if tail call optimization is implemented, the call stack always has O(1) records.

class Solution {
    public double findMedianSortedArrays(int[] A, int[] B) {
        int na = A.length, nb = B.length;
        int n = na + nb;
        if ((na + nb) % 2 == 1) {
            return solve(A, B, n / 2, 0, na - 1, 0, nb - 1);
        } else {
            return (
                (double) (solve(A, B, n / 2, 0, na - 1, 0, nb - 1) +
                    solve(A, B, n / 2 - 1, 0, na - 1, 0, nb - 1)) /
                2
            );
        }
    }

    public int solve(
        int[] A,
        int[] B,
        int k,
        int aStart,
        int aEnd,
        int bStart,
        int bEnd
    ) {
        // If the segment of on array is empty, it means we have passed all
        // its element, just return the corresponding element in the other array.
        if (aEnd < aStart) {
            return B[k - aStart];
        }
        if (bEnd < bStart) {
            return A[k - bStart];
        }

        // Get the middle indexes and middle values of A and B.
        int aIndex = (aStart + aEnd) / 2, bIndex = (bStart + bEnd) / 2;
        int aValue = A[aIndex], bValue = B[bIndex];

        // If k is in the right half of A + B, remove the smaller left half.
        if (aIndex + bIndex < k) {
            if (aValue > bValue) {
                return solve(A, B, k, aStart, aEnd, bIndex + 1, bEnd);
            } else {
                return solve(A, B, k, aIndex + 1, aEnd, bStart, bEnd);
            }
        }
        // Otherwise, remove the larger right half.
        else {
            if (aValue > bValue) {
                return solve(A, B, k, aStart, aIndex - 1, bStart, bEnd);
            } else {
                return solve(A, B, k, aStart, aEnd, bStart, bIndex - 1);
            }
        }
    }
}

Approach 3 A Better Binary Search
The given approach for finding the median of two sorted arrays utilizes a binary search algorithm, 
focusing on the smaller of the two arrays to achieve optimal efficiency. By partitioning both arrays such that the maximum of 
the left partition is less than or equal to the minimum of the right partition, the algorithm effectively identifies the median in
\(O(\log(\min(m, n)))\) time complexity, where \(m\) and \(n\) are the lengths of the two arrays. The space complexity of this approach is
\(O(1)\) since it only uses a constant amount of additional space for variables, without any need for merging or storing the arrays. 
This makes it a highly efficient solution for the median-finding problem, especially for large datasets.

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if (nums1.length > nums2.length) {
            return findMedianSortedArrays(nums2, nums1);
        }

        int m = nums1.length, n = nums2.length;
        int left = 0, right = m;

        while (left <= right) {
            int partitionA = (left + right) / 2;
            int partitionB = (m + n + 1) / 2 - partitionA;

            int maxLeftA = (partitionA == 0)
                ? Integer.MIN_VALUE
                : nums1[partitionA - 1];
            int minRightA = (partitionA == m)
                ? Integer.MAX_VALUE
                : nums1[partitionA];
            int maxLeftB = (partitionB == 0)
                ? Integer.MIN_VALUE
                : nums2[partitionB - 1];
            int minRightB = (partitionB == n)
                ? Integer.MAX_VALUE
                : nums2[partitionB];

            if (maxLeftA <= minRightB && maxLeftB <= minRightA) {
                if ((m + n) % 2 == 0) {
                    return (
                        (Math.max(maxLeftA, maxLeftB) +
                            Math.min(minRightA, minRightB)) /
                        2.0
                    );
                } else {
                    return Math.max(maxLeftA, maxLeftB);
                }
            } else if (maxLeftA > minRightB) {
                right = partitionA - 1;
            } else {
                left = partitionA + 1;
            }
        }
        return 0.0;
    }
}

