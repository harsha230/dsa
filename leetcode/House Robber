Approach 1 Recursion with memorization
This approach uses memoization to solve the house robbing problem by avoiding redundant recursive calls. The function robFrom(i, nums) 
computes the maximum amount that can be robbed starting from the i-th house. At each house i, the algorithm has two choices: skip the current 
house and rob from the next house (i+1), or rob the current house and skip to the house after next (i+2). The result of each subproblem is stored in
the memo array to prevent re-computation. The time complexity is O(n), where n is the number of houses, as each house is processed once. The space complexity 
is O(n) due to the memo array storing results for each house.

class Solution {
    private int[] memo;

    public int rob(int[] nums) {
        this.memo = new int[100];

        // Fill with sentinel value representing not-calculated recursions.
        Arrays.fill(this.memo, -1);

        return this.robFrom(0, nums);
    }

    private int robFrom(int i, int[] nums) {
        // No more houses left to examine.
        if (i >= nums.length) {
            return 0;
        }

        // Return cached value.
        if (this.memo[i] > -1) {
            return this.memo[i];
        }

        // Recursive relation evaluation to get the optimal answer.
        int ans = Math.max(
            this.robFrom(i + 1, nums),
            this.robFrom(i + 2, nums) + nums[i]
        );

        // Cache for future use.
        this.memo[i] = ans;
        return ans;
    }
}


Approach 2: Dynamic Programming
This is a **dynamic programming** solution to the house robbing problem. It avoids recursion by iterating through the array in reverse. 
The `maxRobbedAmount` array stores the maximum money that can be robbed starting from each house. The last element of `nums` is initialized directly in 
`maxRobbedAmount[N-1]`, and the base case for no house is set to `0`. For each house `i` from `N-2` down to `0`, the algorithm computes the maximum money 
that can be robbed by either skipping the current house (`maxRobbedAmount[i+1]`) or robbing it and moving to house `i+2` (`maxRobbedAmount[i+2] + nums[i]`). 
The time complexity is **O(n)**, and the space complexity is also **O(n)** because of the `maxRobbedAmount` array.

class Solution {
    public int rob(int[] nums) {
        int N = nums.length;

        // Special handling for empty array case.
        if (N == 0) {
            return 0;
        }

        int[] maxRobbedAmount = new int[nums.length + 1];

        // Base case initializations.
        maxRobbedAmount[N] = 0;
        maxRobbedAmount[N - 1] = nums[N - 1];

        // DP table calculations.
        for (int i = N - 2; i >= 0; --i) {
            // Same as the recursive solution.
            maxRobbedAmount[i] = Math.max(
                maxRobbedAmount[i + 1],
                maxRobbedAmount[i + 2] + nums[i]
            );
        }

        return maxRobbedAmount[0];
    }
}


Approach 3 dp but without table

class Solution {
    public int rob(int[] nums) {
        int N = nums.length;

        // Special handling for empty array case.
        if (N == 0) {
            return 0;
        }

        int robNext, robNextPlusOne;

        // Base case initializations.
        robNextPlusOne = 0;
        robNext = nums[N - 1];

        // DP table calculations. Note: we are not using any
        // table here for storing values. Just using two
        // variables will suffice.
        for (int i = N - 2; i >= 0; --i) {
            // Same as the recursive solution.
            int current = Math.max(robNext, robNextPlusOne + nums[i]);

            // Update the variables
            robNextPlusOne = robNext;
            robNext = current;
        }

        return robNext;
    }
}

