

Approach 1  Recursive Approach

The recursive approach to swapping adjacent nodes in a linked list operates by recursively processing pairs of nodes until the end of the list is reached. 
In each recursive call, the function identifies the current pair of nodes to swap (the `firstNode` and `secondNode`) and then makes a recursive call to handle 
the next pair. After the recursive call returns the modified list of the remaining nodes, the pointers are adjusted to complete the swap, linking the swapped 
pair to the newly modified sublist. This method effectively transforms the linked list in a linear manner, achieving a time complexity of \(O(n)\), where \(n\)
is the number of nodes in the list, since each node is visited exactly once. The space complexity is \(O(n)\) in the worst case due to the recursion stack, but
it can be optimized to \(O(1)\) if tail recursion optimization is applied, allowing for an iterative simulation of recursion.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
        // If the list has no node or has only one node left.
        if ((head == null) || (head.next == null)) {
            return head;
        }

        // Nodes to be swapped
        ListNode firstNode = head;
        ListNode secondNode = head.next;

        // Swapping
        firstNode.next = swapPairs(secondNode.next);
        secondNode.next = firstNode;

        // Now the head is the second node
        return secondNode;
    }
}

Approach 2 Iterative Approach

The recursive approach to swapping adjacent nodes in a linked list operates by recursively processing pairs of nodes until the end of the list is reached.
In each recursive call, the function identifies the current pair of nodes to swap (the `firstNode` and `secondNode`) and then makes a recursive call to
handle the next pair. After the recursive call returns the modified list of the remaining nodes, the pointers are adjusted to complete the swap, linking
the swapped pair to the newly modified sublist. This method effectively transforms the linked list in a linear manner, achieving a time complexity of 
\(O(n)\), where \(n\) is the number of nodes in the list, since each node is visited exactly once. The space complexity is \(O(n)\) in the worst case due to
the recursion stack,
but it can be optimized to \(O(1)\) if tail recursion optimization is applied, allowing for an iterative simulation of recursion.
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
        // Dummy node acts as the prevNode for the head node
        // of the list and hence stores pointer to the head node.
        ListNode dummy = new ListNode(-1);
        dummy.next = head;

        ListNode prevNode = dummy;

        while ((head != null) && (head.next != null)) {
            // Nodes to be swapped
            ListNode firstNode = head;
            ListNode secondNode = head.next;

            // Swapping
            prevNode.next = secondNode;
            firstNode.next = secondNode.next;
            secondNode.next = firstNode;

            // Reinitializing the head and prevNode for next swap
            prevNode = firstNode;
            head = firstNode.next; // jump
        }

        // Return the new head node.
        return dummy.next;
    }
}


